{"version":3,"sources":["img/convite.png","audio/takeoff.mp3","audio/pianosong.mp3","components/Timer.tsx","pages/IndexPage.tsx","index.tsx"],"names":["module","exports","IndexPage","useState","timeLeft","setTimeLeft","counting","setCounting","useEffect","ticker","setTimeout","now","Date","diff","days","Math","floor","hours","minutes","seconds","getTimeLeft","clearTimeout","audiofile","require","musicfile","faderClass","setFaderClass","ticketClass","setTicketClass","entered","setEntered","pageLoadFinish","setPageLoadFinish","UIfx","volume","throttleMs","planeSFX","timer","timer2","timer3","play","timer4","className","alt","src","ticketImg","onClick","Timer","autoPlay","type","ReactDOM","render","document","getElementById"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,qC,yFCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,uGC4D5BC,EAnDsB,WAAO,IAAD,EACTC,mBAAoB,IADX,mBAClCC,EADkC,KACxBC,EADwB,OAETF,oBAAS,GAFA,mBAElCG,EAFkC,KAExBC,EAFwB,KA2BzCC,qBAAU,WACR,IAAIC,EAASC,YAAW,WACtBL,EAzBgB,WAClB,IAAMM,EAAM,IAAIC,KAIVC,GAHO,IAAID,KAAK,KAAM,EAAG,GAAI,KAGbD,EAEtB,OAAIE,EAAO,EACQ,CACfC,KAAMC,KAAKC,MAAMH,EAAI,OACrBI,MAAOF,KAAKC,MAAOH,EAAI,KAAuB,IAC9CK,QAASH,KAAKC,MAAOH,EAAO,IAAO,GAAM,IACzCM,QAASJ,KAAKC,MAAOH,EAAO,IAAQ,MAKpCP,GACFC,GAAY,GAEP,IAKOa,MACX,KACH,OAAO,WACLC,aAAaZ,OAYjB,OACE,6BACE,8BATEH,EACI,GAAN,OAAUF,EAASU,KAAnB,kBAAiCV,EAASa,MAA1C,mBAA0Db,EAASc,QAAnE,qBAAuFd,EAASe,QAAhG,YAEO,Q,wBC1CPG,EAAYC,EAAQ,IACpBC,EAAYD,EAAQ,IAuEXrB,EArEsB,WAAO,IAAD,EACLC,mBAAS,SADJ,mBAClCsB,EADkC,KACtBC,EADsB,OAEHvB,mBAAS,eAFN,mBAElCwB,EAFkC,KAErBC,EAFqB,OAGXzB,oBAAS,GAHE,mBAGlC0B,EAHkC,KAGzBC,EAHyB,OAIG3B,oBAAS,GAJZ,mBAIlC4B,EAJkC,KAIlBC,EAJkB,OAKtB7B,mBACjB,IAAI8B,IAAKX,EAAW,CAClBY,OAAQ,GACRC,WAAY,OAHTC,EALkC,oBA2CzC,OA/BA5B,qBAAU,WAER,IAAM6B,EAAQ3B,YAAW,WACvBkB,EAAe,yBACfP,aAAagB,KACZ,KACH,OAAO,WACLhB,aAAagB,MAEd,IAEH7B,qBAAU,WACR,IAAgB,IAAZqB,EAAkB,CAEpBH,EAAc,gBACd,IAAMW,EAAQ3B,YAAW,kBAAMgB,EAAc,qBAAoB,KAC3DY,EAAS5B,YAAW,kBAAMgB,EAAc,oBAAmB,KAG3Da,EAAS7B,YAAW,kBAAM0B,EAASI,SAAQ,KAC3CC,EAAS/B,YAAW,kBAAMsB,GAAkB,KAAO,KAEzD,OAAO,WACLX,aAAagB,GACbhB,aAAaiB,GACbjB,aAAakB,GACblB,aAAaoB,OAGhB,CAACZ,IAGF,yBAAKa,UAAU,OACb,yBAAKA,UAAWjB,IACZI,GACA,yBACEa,UAAWf,EACXgB,IAAI,GACJC,IAAKC,IACLC,QAAS,kBAAMhB,GAAW,OAIhC,yBAAKY,UAAU,YACb,2BACE,kBAACK,EAAD,QAGHhB,GACC,2BAAOiB,UAAQ,GACb,4BAAQJ,IAAKpB,EAAWyB,KAAK,iBCjEvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e0796e89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/convite.31d10a6f.png\";","module.exports = __webpack_public_path__ + \"static/media/takeoff.8ecec9bd.mp3\";","module.exports = __webpack_public_path__ + \"static/media/pianosong.ed4028bc.mp3\";","import React, { FunctionComponent, useState, useEffect } from \"react\";\r\n\r\ninterface ITimeLeft {\r\n  days?: number;\r\n  hours?: number;\r\n  minutes?: number;\r\n  seconds?: number;\r\n}\r\n\r\nconst IndexPage: FunctionComponent = () => {\r\n  const [timeLeft, setTimeLeft] = useState<ITimeLeft>({});\r\n  const [counting, setCounting] = useState(true);\r\n\r\n  const getTimeLeft = (): ITimeLeft => {\r\n    const now = new Date();\r\n    const then = new Date(2020, 5, 20, 16); // months start at 0...\r\n\r\n    // + operator is the easiest way to convert to UNIX\r\n    const diff = +then - +now;\r\n\r\n    if (diff > 0) {\r\n      const timeLeft = {\r\n        days: Math.floor(diff / (1000 * 60 * 60 * 24)),\r\n        hours: Math.floor((diff / (1000 * 60 * 60)) % 24),\r\n        minutes: Math.floor((diff / 1000 / 60) % 60),\r\n        seconds: Math.floor((diff / 1000) % 60),\r\n      };\r\n      return timeLeft;\r\n    }\r\n\r\n    if (counting) {\r\n      setCounting(false);\r\n    }\r\n    return {};\r\n  };\r\n\r\n  useEffect(() => {\r\n    let ticker = setTimeout(() => {\r\n      setTimeLeft(getTimeLeft());\r\n    }, 1000);\r\n    return () => {\r\n      clearTimeout(ticker);\r\n    };\r\n  });\r\n\r\n  const renderTime = (): string => {\r\n    if (counting) {\r\n      return `${timeLeft.days} days, ${timeLeft.hours} hours, ${timeLeft.minutes} minutes, ${timeLeft.seconds} seconds`;\r\n    } else {\r\n      return \"<3\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <span>{renderTime()}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { FunctionComponent, useState, useEffect } from \"react\";\r\nimport UIfx from \"uifx\";\r\n\r\nimport Timer from \"../components/Timer\";\r\nimport \"./IndexPage.scss\";\r\nimport ticketImg from \"../img/convite.png\";\r\nconst audiofile = require(\"../audio/takeoff.mp3\");\r\nconst musicfile = require(\"../audio/pianosong.mp3\");\r\n\r\nconst IndexPage: FunctionComponent = () => {\r\n  const [faderClass, setFaderClass] = useState(\"Fader\");\r\n  const [ticketClass, setTicketClass] = useState(\"ticketImage\");\r\n  const [entered, setEntered] = useState(false);\r\n  const [pageLoadFinish, setPageLoadFinish] = useState(false);\r\n  const [planeSFX] = useState(\r\n    new UIfx(audiofile, {\r\n      volume: 0.2,\r\n      throttleMs: 100,\r\n    })\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Ticket Fade\r\n    const timer = setTimeout(() => {\r\n      setTicketClass(\"ticketImage revealing\");\r\n      clearTimeout(timer);\r\n    }, 1000);\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (entered === true) {\r\n      // Fader animations\r\n      setFaderClass(\"Fader fading\");\r\n      const timer = setTimeout(() => setFaderClass(\"Fader revealing\"), 7000);\r\n      const timer2 = setTimeout(() => setFaderClass(\"Fader revealed\"), 10000);\r\n\r\n      // Sound\r\n      const timer3 = setTimeout(() => planeSFX.play(), 1000);\r\n      const timer4 = setTimeout(() => setPageLoadFinish(true), 10000);\r\n\r\n      return () => {\r\n        clearTimeout(timer);\r\n        clearTimeout(timer2);\r\n        clearTimeout(timer3);\r\n        clearTimeout(timer4);\r\n      };\r\n    }\r\n  }, [entered]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={faderClass}>\r\n        {!entered && (\r\n          <img\r\n            className={ticketClass}\r\n            alt=\"\"\r\n            src={ticketImg}\r\n            onClick={() => setEntered(true)}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"MainBody\">\r\n        <p>\r\n          <Timer />\r\n        </p>\r\n      </div>\r\n      {pageLoadFinish && (\r\n        <audio autoPlay>\r\n          <source src={musicfile} type=\"audio/mp3\" />\r\n        </audio>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./globalStyles.scss\";\r\nimport App from \"./pages/IndexPage\";\r\n\r\n/* Don't change this file, work on IndexPage.tsx instead */\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}